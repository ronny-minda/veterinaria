// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// model Example {
//     id        Int      @id @default(autoincrement())
//     name      String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     @@index([name])
// }

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId            String

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    direccion     String?
    password      String?
    accounts      Account[]
    sessions      Session[]
    factura       Factura[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// enum Role {
//   USER
//   ADMIN
// }

// TRANSACCION DE LA FACTURA
model Factura {
    id            String    @id @default(cuid())
    flecha        DateTime
    user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId        String
    producto      Producto[]
}

model Producto {
    id            String    @id @default(cuid())
    nombre        String?
    cantidad      Int?
    categoria     String?
    descripcion   String?
    precio        Int?
    factura       Factura   @relation(fields: [facturaId], references: [id],  onDelete: Cascade)
    facturaId     String
    image         Image[]
}

model Image {
    id            String    @id @default(cuid())
    src           String
    producto      Producto  @relation(fields: [productoId], references: [id],  onDelete: Cascade)
    productoId    String
}

// TODOS LOS PRODUCTOS
model AllProducto {
    id            String    @id @default(cuid())
    nombre        String?
    cantidad      Int?
    categoria     String?
    descripcion   String?
    precio        Int?
    imagenes      ImageProducto[]
}

model ImageProducto {
    id            String    @id @default(cuid())
    src           String
    producto      AllProducto  @relation(fields: [productoId], references: [id],  onDelete: Cascade)
    productoId    String
}